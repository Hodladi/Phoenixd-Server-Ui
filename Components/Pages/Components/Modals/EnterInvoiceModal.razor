@using Wallet.Models
@using Wallet.Services
@inject IModalService ModalService
@inject IJSRuntime JSRuntime
@inject IApiService ApiService

<ModalWrapper>
    <ModalHeader>
        <span class="modal-title">Enter invoice string</span>
    </ModalHeader>
    <ModalBody>
        <div class="mb-3">
            <label for="invoice" class="form-label">Invoice: </label>
            <div class="input-group">
                <input type="text" class="form-control" id="invoice" @bind="@DecodedInvoiceDetails.Invoice" @ref="_invoiceInput" tabindex="1" />
                <button class="input-group-text custom-input-group-text" type="button" @onclick="PasteFromClipboard">
                    <i class="bi bi-clipboard2"></i>
                </button>
            </div>
        </div>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="custom-button-close me-2" @onclick="() => ModalInstance.CancelAsync()">Close</button>
        <button class="btn btn-outline-light custom-button" @onclick="GetDetails" disabled="@DisableButton">Fetch</button>
    </ModalFooter>
</ModalWrapper>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = default!;
    [Parameter] public ApiRequest DecodedInvoiceDetails { get; set; } = new();

    private bool DisableButton { get; set; }
    private ElementReference _invoiceInput;
    private ApiResponse _result { get; set; } = new();

    private async Task GetDetails()
    {

        await ModalInstance.CloseAsync();
        await OpenNextModal(DecodedInvoiceDetails);
    }

    private async Task OpenNextModal(ApiRequest DecodedInvoiceDetails)
    {
        var lowerResult = DecodedInvoiceDetails.Invoice?.ToLower();
        if (lowerResult!.StartsWith("lightning:"))
        {
            lowerResult = lowerResult.Substring("lightning:".Length);
        }

        DecodedInvoiceDetails.Invoice = lowerResult;

        var authResult = await ApiService.LnUrlAuthAsync(DecodedInvoiceDetails.Invoice);
        if (authResult != "authentication success")
        {
            var parameters = new ModalParameters();
            parameters.Add("DecodedInvoiceDetails", DecodedInvoiceDetails);
            ModalService.Show<PayInvoiceModal>("Payment result", parameters);
        }
        else
        {
            await ShowAuthenticationSuccessModal("LNURL Authentication was successful.");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _invoiceInput.FocusAsync();
        }
    }

    private async Task PasteFromClipboard()
    {
        var clipboardText = await JSRuntime.InvokeAsync<string>("pasteFromClipboard");
        if (!string.IsNullOrEmpty(clipboardText))
        {
            DecodedInvoiceDetails.Invoice = clipboardText;
            await _invoiceInput.FocusAsync();
        }
    }

    private async Task ShowAuthenticationSuccessModal(string message)
    {
        await ModalInstance.CloseAsync();
        var parameters = new ModalParameters();
        parameters.Add("Message", message);
        ModalService.Show<LnUrlAuthModal>("Success", parameters);
    }
}